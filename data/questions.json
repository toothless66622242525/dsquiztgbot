[
  {
    "question": "Какой из этих методов не является методом машинного обучения с учителем?",
    "options": ["Линейная регрессия", "Кластеризация K-средних", "Метод опорных векторов (SVM)", "Деревья решений"],
    "correct_option_index": 1,
    "explanation": "Кластеризация K-средних — это метод обучения без учителя, используемый для группировки данных."
  },
  {
    "question": "Для чего в основном используется библиотека Pandas?",
    "options": ["Для создания веб-приложений", "Для визуализации данных", "Для обработки и анализа табличных данных", "Для построения нейронных сетей"],
    "correct_option_index": 2,
    "explanation": "Pandas предоставляет структуры DataFrame и Series, которые идеально подходят для работы с табличными данными."
  },
  {
    "question": "Что такое 'переобучение' (overfitting) модели?",
    "options": [
      "Модель слишком простая и не улавливает закономерности",
      "Модель показывает высокую точность на тестовых данных",
      "Модель слишком хорошо выучила обучающие данные и плохо работает на новых",
      "Модель обучается слишком долго"
    ],
    "correct_option_index": 2,
    "explanation": "Переобучение происходит, когда модель запоминает шум в обучающих данных вместо общих закономерностей."
  },
   {
    "question": "Какая задача решается, когда нужно предсказать цену квартиры на основе её характеристик?",
    "options": ["Классификация", "Кластеризация", "Регрессия", "Ранжирование"],
    "correct_option_index": 2,
    "explanation": "Предсказание непрерывного числового значения (цены) — это типичная задача регрессии."
  },
  {
    "question": "Какой из этих инструментов в основном предназначен для глубокого обучения (Deep Learning)?",
    "options": ["Scikit-learn", "NumPy", "PyTorch", "Matplotlib"],
    "correct_option_index": 2,
    "explanation": "PyTorch и TensorFlow являются ведущими фреймворками для построения и обучения глубоких нейронных сетей."
  },
  {
    "question": "Что является основной структурой данных в библиотеке NumPy?",
    "options": ["DataFrame", "Series", "ndarray (n-dimensional array)", "Dictionary"],
    "correct_option_index": 2,
    "explanation": "ndarray — это многомерный массив, который является ядром библиотеки NumPy и обеспечивает высокую производительность вычислений."
  },
  {
    "question": "Что такое 'обучение без учителя' (Unsupervised Learning)?",
    "options": ["Обучение, где у данных нет меток или правильных ответов", "Обучение на данных, размеченных вручную", "Процесс, когда модель учится на своих ошибках", "Обучение, которое не требует компьютера"],
    "correct_option_index": 0,
    "explanation": "В обучении без учителя алгоритм пытается найти скрытые структуры и закономерности в неразмеченных данных. Кластеризация — яркий пример."
  },
  {
    "question": "Какая метрика часто используется для оценки качества модели бинарной классификации?",
    "options": ["Среднеквадратичная ошибка (MSE)", "Точность (Accuracy)", "Коэффициент детерминации (R²)", "Средний абсолютный процент ошибки (MAPE)"],
    "correct_option_index": 1,
    "explanation": "Точность (Accuracy) показывает долю правильных ответов. Также широко используются Precision, Recall и F1-score."
  },
  {
    "question": "Процесс создания новых признаков из существующих данных для улучшения производительности модели называется:",
    "options": ["Выбор признаков (Feature Selection)", "Инжиниринг признаков (Feature Engineering)", "Масштабирование признаков (Feature Scaling)", "Уменьшение размерности (Dimensionality Reduction)"],
    "correct_option_index": 1,
    "explanation": "Именно инжиниринг признаков является одним из самых творческих и важных этапов в работе специалиста по данным."
  },
  {
    "question": "Какую задачу решает банк, когда пытается определить, является ли транзакция мошеннической или нет?",
    "options": ["Регрессия", "Кластеризация", "Классификация", "Анализ временных рядов"],
    "correct_option_index": 2,
    "explanation": "Это задача бинарной классификации, где объект (транзакция) нужно отнести к одному из двух классов: 'мошенническая' или 'легитимная'."
  },
   {
    "question": "Ваш менеджер говорит: 'Эта модель должна иметь точность 99.9%!'. Что это, скорее всего, означает?",
    "options": ["Он поставил четкую и достижимую цель", "Это стандартное требование для всех моделей", "Он не очень понимает в машинном обучении", "Нужно использовать самую сложную нейросеть"],
    "correct_option_index": 2,
    "explanation": "Требование конкретного процента точности без учета контекста (классового дисбаланса, цены ошибки и т.д.) часто говорит о непонимании сложности и нюансов машинного обучения."
  },
  {
    "question": "Вы потратили неделю на создание сложной модели, а простая логистическая регрессия дала почти такой же результат. Ваши действия?",
    "options": ["Обязательно внедрять сложную модель, ведь на нее ушло столько времени!", "Выбрать простую модель, потому что она более интерпретируема и быстра", "Переделать все с нуля, используя другой фреймворк", "Сказать, что сложная модель 'более перспективна'"],
    "correct_option_index": 1,
    "explanation": "Принцип 'бритвы Оккама' в DS: не следует создавать сущности (сложность модели) без необходимости. Простые и понятные модели часто предпочтительнее."
  },
  {
    "question": "Что означает 'синтаксический сахар' в программировании?",
    "options": ["Конструкция для работы со сладостями", "Дополнение к синтаксису, делающее код слаще на вкус", "Упрощенная и более удобная для чтения конструкция языка, которая не добавляет новой функциональности", "Библиотека для построения графиков в виде тортов"],
    "correct_option_index": 2,
    "explanation": "Синтаксический сахар (Syntactic sugar) делает использование языка более приятным. Например, list comprehension в Python — это сахар над обычным циклом for."
  },
  {
    "question": "В чем главное отличие списка (list) от кортежа (tuple) в Python?",
    "options": ["Список быстрее", "Кортеж можно изменять, а список нет", "Список можно изменять (изменяемый), а кортеж нет (неизменяемый)", "Они абсолютно одинаковы"],
    "correct_option_index": 2,
    "explanation": "Неизменяемость (immutability) кортежей — их ключевое отличие. Это делает их более предсказуемыми и позволяет использовать как ключи в словарях."
  },
  {
    "question": "Какой HTTP-статус код означает 'OK' (успешный запрос)?",
    "options": ["404 Not Found", "500 Internal Server Error", "200 OK", "301 Moved Permanently"],
    "correct_option_index": 2,
    "explanation": "2xx-коды означают успешные операции. 4xx — ошибки клиента, 5xx — ошибки сервера."
  },
  {
    "question": "Дата-сайентист получил данные и сразу же начал строить нейросеть. Какую стадию он, скорее всего, пропустил?",
    "options": ["Разведочный анализ данных (EDA)", "Обучение модели", "Оценку модели", "Написание отчета"],
    "correct_option_index": 0,
    "explanation": "Пропуск EDA — одна из самых частых ошибок новичков. Невозможно построить хорошую модель, не 'почувствовав' и не поняв свои данные."
  },
  {
    "question": "Какая библиотека Python используется для создания интерактивных веб-визуализаций и дашбордов?",
    "options": ["Seaborn", "Plotly / Dash", "Matplotlib", "Pillow"],
    "correct_option_index": 1,
    "explanation": "Matplotlib и Seaborn в основном создают статические изображения, в то время как Plotly и построенный на нем Dash специализируются на интерактивных графиках."
  },
  {
    "question": "Что такое 'p-value' (p-значение) в статистике?",
    "options": ["Цена продукта", "Вероятность того, что нулевая гипотеза верна", "Вероятность получить наблюдаемые (или более экстремальные) результаты, если нулевая гипотеза верна", "Мощность процессора"],
    "correct_option_index": 2,
    "explanation": "Это сложное, но ключевое понятие. Если p-value очень мало (например, < 0.05), мы отвергаем нулевую гипотезу и считаем результат статистически значимым."
  },
  {
    "question": "Для чего предназначен Git?",
    "options": ["Для написания кода на Python", "Для хранения больших датасетов", "Для общения в команде", "Для системы контроля версий и совместной работы над кодом"],
    "correct_option_index": 3,
    "explanation": "Git — это стандарт де-факто для контроля версий, позволяющий отслеживать изменения, откатываться к старым версиям и эффективно работать в команде."
  },
  {
    "question": "Вы видите, что ваша модель для определения котиков на фото отлично работает на белых котиках, но плохо на черных. В чем, скорее всего, проблема?",
    "options": ["Нужно больше слоев в нейросети", "Несбалансированная обучающая выборка", "Слишком низкая скорость обучения (learning rate)", "Компьютер не любит черный цвет"],
    "correct_option_index": 1,
    "explanation": "Скорее всего, в обучающих данных было гораздо больше белых котиков, чем черных. Модель не получила достаточно примеров, чтобы научиться распознавать последних. Это проблема несбалансированной выборки."
  },
  {
    "question": "Какая структура данных в Python является неупорядоченной коллекцией уникальных элементов?",
    "options": ["Список (list)", "Кортеж (tuple)", "Словарь (dict)", "Множество (set)"],
    "correct_option_index": 3,
    "explanation": "Множества идеально подходят для проверки принадлежности элемента и для математических операций, таких как объединение, пересечение и разность."
  },
  {
    "question": "Какой из этих методов обычно используется для уменьшения размерности данных?",
    "options": ["Метод главных компонент (PCA)", "Логистическая регрессия", "K-ближайших соседей (KNN)", "Градиентный бустинг"],
    "correct_option_index": 0,
    "explanation": "PCA (Principal Component Analysis) находит новые признаки (компоненты), которые являются комбинацией старых, и позволяет отбросить наименее важные, сохранив максимум информации."
  },
  {
    "question": "Что делает `_` (одно подчеркивание) в Python в цикле `for _ in range(5):`?",
    "options": ["Это синтаксическая ошибка", "Это специальная переменная для чисел", "Это общепринятое имя для переменной, значение которой не будет использоваться", "Это вызывает бесконечный цикл"],
    "correct_option_index": 2,
    "explanation": "Когда нам нужно просто повторить действие N раз, но сам счетчик цикла (0, 1, 2...) нам не нужен, мы используем `_`, чтобы показать это намерение."
  },
  {
    "question": "Вы хотите сохранить обученную модель Scikit-learn в файл, чтобы использовать ее позже. Какую библиотеку, скорее всего, будете использовать?",
    "options": ["Pandas", "JSON", "Pickle", "Requests"],
    "correct_option_index": 2,
    "explanation": "Pickle позволяет 'сериализовать' (превратить в байтовую строку) практически любой объект Python, включая сложные модели машинного обучения, для сохранения на диск."
  },
  {
    "question": "В чем заключается основной принцип работы алгоритма K-ближайших соседей (KNN)?",
    "options": ["Он строит дерево решений", "Он ищет линию, разделяющую классы", "Объект относится к тому же классу, что и большинство его ближайших соседей", "Он ищет центр каждого кластера"],
    "correct_option_index": 2,
    "explanation": "Это один из самых простых и интуитивно понятных алгоритмов: 'скажи мне, кто твои соседи, и я скажу, кто ты'."
  }
]